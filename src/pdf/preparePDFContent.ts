import sharp from "sharp";
import axios from "axios";

type Profile = { name: string; job_title: string };

export const prepareStyle = (primaryColor: string, secondaryColor: string) => {
  return {
    styles: {
      h1: {
        fontSize: 30,
        marginTop: 20,
        color: primaryColor,
        bold: true,
      },
      h2: {
        fontSize: 20,
        marginBottom: 20,
        bold: true,
      },
      h3: {
        fontSize: 15,
        marginBottom: 10,
        marginTop: 10,
        color: secondaryColor,
        bold: true,
      },
      h4: {
        fontSize: 15,
        marginBottom: 5,
        bold: true,
      },
      h5: {
        fontSize: 15,
        marginBottom: 10,
      },
      p: {
        fontSize: 14,
        marginBottom: 20,
        alignment: "left",
        color: "#6b7280",
      },
      li: {
        fontSize: 12,
        lineHeight: 1.5,
        marginBottom: 20,
        alignment: "left",
        color: "#6b7280",
      },
      date: {
        fontSize: 12,
        marginBottom: 5,
        color: "#6b7280",
      },
      link: {
        decoration: "underline",
      },
    },
    defaultStyle: {
      font: "Inter",
    },
  };
};

export const prepareInfo = ({ name, job_title }: Profile) => {
  return {
    title: `Resume â€” ${name}`,
    author: name,
    subject: "Resume",
    creator: "Resumo",
    producer: "Resumo",
    keywords: `${job_title}, Resume, Resumo`,
  };
};

const displayFooter = () => {
  return [
    {
      svg: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="52" height="15" viewBox="0 0 104 30">
            <a href="https://resumo.me/" target="_blank">
              <path fill="#000" d="M4.93 8.184c.127 0 .253-.002.38-.003.624-.093 1.158-.144 1.6-.15l1.264.107c.373-.006.766.086 1.18.277.33.135.625.398.885.79l.168.763v.042c-.063.69-.176 1.16-.337 1.41-.554.835-1.06 1.34-1.516 1.519-.14.144-.254.218-.337.22-.604.406-1.517.705-2.74.89l-.547.006c-.013-.043-.028-.085-.042-.127l.042-.128v-.256c-.028-3.26-.099-5.032-.21-5.315l.21-.045m-4.93 15c0 .121.464.236 1.391.339l.168-.044c.31 0 .62-.002.928-.003 1.32-.064 1.98-.186 1.98-.355v-.17c.14-.647.21-1.102.21-1.364.14-1.292.211-2.2.211-2.725v-.17l-.042-.213c.029-.042.056-.085.084-.128.97 1.28 1.53 1.98 1.685 2.106.633.763 1.209 1.407 1.728 1.93.786.787 1.39 1.324 1.812 1.613l.084-.002.506-.383c1.306-1.015 2.401-2.15 3.286-3.4 0-.114-.042-.169-.126-.166 0-.05-.367-.252-1.096-.61-.92-.465-1.454-.765-1.6-.897-.809-.485-1.455-.94-1.938-1.363l.082-.128c.226-.005.338-.036.338-.092.618-.226 1.489-.81 2.613-1.761 1.207-1.263 1.924-2.334 2.148-3.204.042-.001.155-.331.337-.989L15 9.127l-.21-1.142c0-.291-.17-.753-.507-1.39-.188-.341-.61-.783-1.263-1.326-.47-.293-.836-.483-1.096-.568l-.885-.32L8.891 4c-.9.002-1.799.002-2.697 0-.73.025-1.46.046-2.19.067-.513.147-.92.22-1.223.222-.435.144-.73.217-.884.218-1.16.324-1.79.549-1.897.685.113.659.183 1.367.21 2.126H.17v.085c.148 0 .245 2.467.295 7.401C.422 18.888.352 20.93.253 20.93.19 21.96.106 22.71 0 23.184M15.043 17.715c-.014.114-.03.23-.043.345v.43c.1 1.946.2 2.917.301 2.915.101.462.302.915.603 1.356.474.503.89.79 1.25.865.136.138.38.203.732.19 0 .151.818.211 2.456.172 3.74-.138 6.196-.338 7.365-.562l.173-.395c.087-.434.159-.652.216-.655.1-.548.173-.824.215-.826.108-.493.195-.74.259-.743.05-.432.122-.65.214-.654 0-.28.073-.526.216-.742v-.128l-.043-.042-.129.007c-.646.144-2.412.357-5.299.619-.546.023-1.09.044-1.637.065-.243.01-.702-.073-1.378-.249-.574-.272-.862-.75-.862-1.43.016-.66.03-1.32.043-1.979l.13-.048c1.737-.148 3.303-.254 4.695-.312l.086-.004c.173-.007.288-.686.344-2.035.173-.939.26-1.587.26-1.945l-.173-.25c-1.916.11-3.582.232-4.997.37l-.172-.039.216-2.973c0-.13 1.033-.28 3.1-.463l.43-.018c.992-.054 1.983-.11 2.973-.17l.13.038v-.043c.173-.008.259-.098.259-.27l.043-.045c.064-.906.136-1.467.215-1.686.065-.654.237-1.393.517-2.216L27.621 4l-1.722.033c-.875.053-1.752.104-2.628.153-1.12.16-2.24.319-3.36.473-1.135.134-1.795.257-1.981.37-.647.022-1.02.091-1.122.208-.803.062-1.205.26-1.205.597v.602c-.288 2.28-.488 5.954-.603 11.022l.043.257M41.025 17.49l-.463.234c-.266.168-.8.337-1.599.505l-.463.025c-.069.019-.14.036-.21.053l-.043-.04-1.346.198-.883-.037-.126.049-.043.001-.042-.039c-.841.002-1.263-.046-1.263-.144-.475-.003-.714-.033-.714-.088-.583-.11-.89-.207-.926-.288-.175.008-.414-.049-.715-.175-.638-.226-1.017-.415-1.137-.57l-.126.007-.042.043-.21.552c-.036.615-.078.923-.127.926l-.251 1.349c-.057.552-.156 1.1-.296 1.643 0 .243.154.375.463.395.245.127.414.19.505.185.287.126.484.186.59.18l.673.177c.435.117.785.168 1.052.156 0 .118 1.05.191 3.155.213l.632-.033c1.564-.208 2.364-.35 2.398-.42.68-.1 1.088-.207 1.221-.319.849-.206 1.48-.436 1.893-.69.28-.085.462-.179.547-.28.253-.05.379-.113.379-.189.52-.23 1.192-.743 2.02-1.536.238-.375.393-.565.462-.568.26-.475.429-.735.505-.782 0-.201.043-.329.127-.382.196-.458.323-1.12.378-1.985 0-1.184-.477-2.158-1.43-2.926l-1.347-.717c-.364-.07-.547-.143-.547-.22-.42-.032-.632-.089-.632-.172-.463-.01-.7-.066-.714-.17-.617-.006-.926-.059-.926-.157-.701-.002-1.052-.039-1.052-.108-.652-.027-1.115-.086-1.389-.175-.693-.005-1.06-.055-1.094-.15-.463.024-.856-.039-1.179-.189-.188.01-.44-.045-.756-.169-.758-.259-1.137-.603-1.137-1.027v-.125c0-.195.182-.455.547-.781.28-.077.435-.154.463-.232.449-.065.674-.147.674-.244l2.482-.384 2.482.074c1.445.198 2.385.408 2.82.634.224-.012.337-.144.337-.395l.168-.343c.351-.911.56-1.382.631-1.414.021-.224.05-.337.085-.34l.504-1.155c.064-.262.218-.632.463-1.113v-.126l-.042-.039c-.364-.034-.547-.094-.547-.177-.421-.019-.63-.061-.63-.131-.534-.054-.8-.108-.8-.164L42.456 3c-1.15.065-2.3.128-3.45.19-1.537.243-2.337.397-2.4.463-.644.117-.968.203-.968.26-.329.086-.735.232-1.22.438-.708.273-1.198.52-1.473.742-.434.238-.967.653-1.597 1.249-.562.724-.913 1.324-1.052 1.805-.197.587-.296 1.12-.296 1.6v.67c.099.398.196.798.296 1.196.203.624.665 1.27 1.388 1.938.904.597 1.436.89 1.599.882.182.13.323.192.42.187.653.246 1.48.469 2.484.667l1.22.185 1.304.14c.54.11.904.159 1.094.15 1.178.213 1.767.43 1.767.653v.335c-.034.252-.216.5-.547.74M48.165 17.444c.007.36.185.922.533 1.692.226.51.638 1.074 1.233 1.693.459.344.964.643 1.519.897.424.111.986.202 1.683.274.288-.018.575-.034.863-.053l1.273-.25c1.854-.522 3.113-1.171 3.777-1.944.028 0 .055-.002.083-.005l.04.128-.04.174.204 1.357v.259l.124.12c.028 0 .054-.002.082-.003.013-.015.028-.03.04-.047.384-.122.577-.22.577-.293.328-.048.491-.1.491-.159.452-.156.699-.267.74-.334.355-.057.533-.125.533-.205.363-.1.569-.184.617-.25.382-.117.575-.2.575-.25.574-.148.861-.324.861-.524l-.04-.214c-.123.007-.26-.905-.412-2.735V13.97c.145-2.74.267-4.255.37-4.548.042-1.152.11-1.803.205-1.952 0-.345.083-1.112.246-2.3.07-.463.137-.928.206-1.391l.206-1.262c.164-.67.246-1.15.246-1.438L64.876 1l-.04.003c-.301.031-.48.084-.534.16-.63.122-.944.212-.944.27-.541.096-.897.203-1.069.32l-1.93.59c-.21.013-.349.38-.409 1.102-.137.583-.206 1.005-.206 1.263-.137.683-.205 1.148-.205 1.392l-.206 1.693c-.137 1.18-.274 2.898-.41 5.156v1.767l-.04.434.04-.002v.087c0 .086-.137.237-.41.454-.877.492-1.315.762-1.315.813-.383.052-.574.122-.574.208l-1.601.4c-.296.018-.678-.06-1.15-.232-.24-.172-.473-.387-.7-.646-.327-.641-.492-1.35-.492-2.127v-.086l.288-2.432c.069-.543.136-.892.205-1.046.055-.514.26-1.46.616-2.841.082-.522.164-.785.247-.792.034-.431.076-.65.123-.654.39-1.432.705-2.414.944-2.945.145-.491.267-.815.37-.972l.246-.619v-.086l-.082-.08c-.055.002-.11.006-.165.01l-1.395.3c-.432.17-.747.261-.945.274l-.903.27c-.41.17-.698.259-.862.269-.342.165-.589.252-.739.261-.124.109-.246.418-.37.928-.158.642-.253.964-.288.967-.081.464-.15.699-.205.701-.102.581-.185.874-.247.878-.048.463-.102.696-.163.7-.076.523-.144.785-.206.789-.089.637-.17.958-.246.963 0 .453-.069.773-.206.96 0 .238-.083.704-.246 1.395l-.411 2.872v.819l-.041.907c.028 1.09.083 1.634.165 1.629M66.742 20.1c.495.05.743.104.743.167.44.045.659.103.659.171.378.063.653.146.825.246.131-.006.433.099.907.316l.124-.006c.04-.044.083-.087.124-.131v-.28c0-.332.054-.583.165-.754.034-.845.103-1.333.205-1.463.049-.998.104-1.498.166-1.502.061-1.067.144-1.804.247-2.209 0-.767.082-1.629.248-2.583 0-1.237.069-2.167.206-2.79.055-.002.123.189.207.57l.04.123c.089.493.159.739.206.736.24 1.184.392 1.783.454 1.802.04.55.096.824.165.82.075.696.158 1.078.247 1.15.027.455.097.852.206 1.192.124.727.247 1.453.372 2.179l.247 2.06c0 .14.563.18 1.69.127.235-.01.469-.022.702-.033.495-.023.906-.069 1.237-.14.193-.008.33-.347.413-1.013.136-.683.33-1.438.577-2.265.172-.822.31-1.298.413-1.428.047-.444.101-.667.164-.67.076-.417.144-.628.207-.63.095-.337.192-.672.288-1.008.274-.87.55-1.737.825-2.605.068-.184.137-.366.206-.548l.412-1.261c.165-.236.247-.391.247-.466.015-.001.028-.001.041-.003v.042c.035 2.929.09 4.391.166 4.389.089 2.124.171 3.185.247 3.183.035 1.284.104 2.04.207 2.272 0 .616.082 1.357.247 2.229v.28l.082.122c.344-.11.687-.221 1.031-.33 1.574-.599 2.605-1.127 3.093-1.593v-.331c-.138-.431-.275-1.16-.413-2.184-.067-.495-.136-.99-.206-1.486l-.206-1.776-.206-2.066c-.138-1.398-.26-3.882-.37-7.45V2.192c0-.36-.207-.531-.62-.517l-.741-.18-1.362-.237c-.605-.088-1.21-.174-1.814-.259l-.207.008c-.13.048-.268.288-.411.723-.104.308-.2.52-.289.635-.041.332-.097.501-.165.503-.075.37-.145.58-.207.632-.095.446-.178.67-.246.673-.035.417-.104.627-.206.632-.035.388-.091.583-.166.587-.193.796-.33 1.272-.413 1.429-.082.417-.15.629-.205.631-.338 1.362-.558 2.09-.66 2.185-.034.416-.09.668-.166.754-.246.937-.495 1.874-.742 2.812l-.041-.04-.536-3.002c-.123-.602-.248-1.204-.37-1.806-.153-.6-.304-1.203-.455-1.802-.234-1.006-.398-1.592-.495-1.76-.035-.468-.089-.701-.165-.697l-.494-1.51c-.234-.783-.426-1.202-.578-1.257l-.577.03c-.255.011-.475.077-.66.198-.687.076-1.03.15-1.03.218-.66.11-.99.196-.99.26-.578.112-.867.196-.867.252-.66.118-.989.274-.989.467l.041.205.041 1.989-.04 2.987c-.07.874-.138 1.748-.207 2.623l-.206 1.587-.207 1.545c-.144 1.183-.253 1.853-.33 2.008-.076.834-.158 1.253-.247 1.258-.047.666-.103 1.001-.164 1.003L66 19.89v.042l.041.04c.467.016.701.058.701.127"/>
              <path fill="#000" d="M98.719 11.958c-.204.643-.556 1.301-1.055 1.976-.549.613-.956.975-1.223 1.085-.198.16-.718.31-1.561.455-.423-.035-.634-.073-.634-.116-.465.009-.983-.222-1.562-.692-.182-.175-.365-.427-.548-.757-.316-.675-.484-1.382-.505-2.122v-.043l.042-.045c-.015-.083-.029-.168-.042-.255 0-1.5.45-2.907 1.349-4.215.605-.832 1.111-1.326 1.52-1.483.14-.145.252-.22.336-.22l.634-.225.507-.01.042-.043c.013.015.028.029.042.043l.717-.012c.562.184.844.295.844.33l.337.167c.556.49.836.816.844.972.31.509.464 1.29.464 2.344 0 .989-.182 1.944-.548 2.866m5.021-5.324v-.212c-.013-.343-.056-.513-.127-.513-.076-.54-.147-.81-.21-.81-.078-.385-.162-.613-.253-.685-.183-.667-.775-1.507-1.773-2.512-.929-.714-1.659-1.12-2.194-1.221-.19-.14-.795-.278-1.814-.405L96.06.294c-.338.022-.507.067-.507.138-.674.075-1.013.154-1.013.231-.506.124-.773.23-.802.315-.168.004-.253.035-.252.091-.675.285-1.38.743-2.11 1.373-.184.084-.618.506-1.308 1.272l-1.35 1.832c-.001.2-.057.3-.169.303-.409.867-.634 1.3-.676 1.302 0 .192-.069.408-.21.647l-.253.691c-.282.87-.493 1.845-.634 2.924v.129c-.013.399-.027.797-.042 1.196.015.398.029.796.042 1.195v.255c.303 1.385.627 2.343.971 2.874.105.394.612 1.076 1.52 2.046l1.223.82c1.125.398 1.843.595 2.151.588l.22-.005-5.718.848c-15.027 1.19-29.532 2.384-44.043 3.468-14.357 1.072-28.744 1.766-43.102 3.551 1.547.953 3.122 1.681 4.663 1.618 13.438-.553 26.873-1.18 40.3-1.925 9.936-.553 19.864-1.254 29.787-2.01 8.531-.648 17.053-1.434 25.57-2.264.817-.08 1.563-.903 2.342-1.38-.796-.639-1.537-1.721-2.398-1.83-1.923-.243-3.884-.175-5.838-.165.321-.059.64-.118.961-.175.14-.003.675-.184 1.603-.539.97-.455 1.617-.832 1.941-1.135.373-.202 1.02-.821 1.94-1.851.894-1.195 1.583-2.493 2.069-3.895.394-1.246.59-2.029.59-2.349.17-.734.253-1.744.253-3.031l-.042-.813" mask="url(#yao5cvb4wb)"/>
            </a>
        </svg>`,
      alignment: "center",
    },
  ];
};

const displayProfile = ({ name, job_title }: Profile) => {
  return [
    { text: name, style: "h1" },
    { text: job_title, style: "h2" },
  ];
};

const displayDescription = (description: string) => {
  return [
    {
      text: description
        .replace(/<[a-z]+>/g, "")
        .replace(/<\/[a-z]+>/g, "\n")
        .replace(/<br\/>/g, "\n"),
      style: "p",
    },
  ];
};

const displayProjects = (
  projects: {
    project: string;
    job_title: string;
    start_date: string;
    end_date: string;
    description: string;
  }[]
) => {
  if (projects?.length)
    return [
      { text: "PROJECTS", style: "h3" },
      projects.map((project) => {
        return [
          { text: project.project, style: ["h4"] },
          { text: project.job_title, style: ["h5"] },
          {
            text: displayDate(project.start_date, project.end_date),
            style: ["date"],
          },
          {
            text: project.description.replace(/<[a-z]+\s\/>/g, "\n"),
            style: ["p"],
          },
        ];
      }),
    ];
};

const displayExperience = (
  experience: {
    job_title: string;
    company: string;
    start_date: string;
    end_date: string;
    description: string;
  }[]
) => {
  if (experience?.length)
    return [
      { text: "EXPERIENCE", style: "h3" },
      experience.map((exp) => {
        return [
          { text: exp.job_title + " - " + exp.company, style: ["h4"] },
          { text: displayDate(exp.start_date, exp.end_date), style: ["date"] },
          { text: exp.description, style: ["p"] },
        ];
      }),
    ];
};

const displayEducation = (
  education: {
    degree: string;
    start_date: string;
    end_date: string;
    institution: string;
  }[]
) => {
  if (education?.length)
    return [
      { text: "EDUCATION", style: "h3" },
      education.map((education) => {
        return [
          { text: education.degree, style: ["h4"] },
          {
            text: displayDate(education.start_date, education.end_date),
            style: ["date"],
          },
          { text: education.institution, style: ["p"] },
        ];
      }),
    ];
};

const displayServices = (services: { name: string }[]) => {
  if (services?.length)
    return [
      { text: "SERVICES", style: "h3" },
      { ul: services.map((service) => service.name), style: "li" },
    ];
};

const displaySkills = (skills: { skill: string }[]) => {
  if (skills?.length)
    return [
      { text: "SKILLS", style: "h3" },
      { ul: skills.map((skill) => skill.skill), style: "li" },
    ];
};

const displayLanguages = (languages: { language: string }[]) => {
  if (languages?.length)
    return [
      { text: "LANGUAGES", style: "h3" },
      { ul: languages.map((lang) => lang.language), style: "li" },
    ];
};

const displayContacts = (contacts: {
  email_address: string;
  phone_number: string;
  postal_address: string;
}) => {
  return [
    { text: "CONTACTS", style: "h3" },
    {
      ul: [
        {
          text: contacts.email_address,
          link: `mailto:${contacts.email_address}`,
        },
        { text: contacts.phone_number, link: `tel:${contacts.phone_number}` },
        {
          text: contacts.postal_address,
          link: `https://www.google.com/maps?q=${contacts.postal_address.replace(
            " ",
            "+"
          )}`,
        },
      ],
      style: ["li", "link"],
    },
  ];
};

const roundImageBuffer = async (buffer: any) => {
  const roundedCorners = Buffer.from(
    '<svg><circle cx="150" cy="150" r="150"/></svg>'
  );

  return await sharp(buffer)
    .resize(300, 300, {
      fit: "cover",
    })
    .composite([
      {
        input: roundedCorners,
        blend: "dest-in",
      },
    ])
    .png()
    .toBuffer();
};

const displayDate = (start: string, end: string) =>
  `${start || "Past"} - ${end || "Present"}`;

export const toDataURL = (url: string) =>
  url?.endsWith(".svg")
    ? axios({ url })
        .then(({ data }: any) => data)
        .then((text) => {
          return { svg: text, alignment: "right", fit: [150, 150] };
        })
    : axios({ url, responseType: "arraybuffer" })
        .then(({ data }: any) => data)
        .then(async (buffer) => {
          const roundedBuffer = await roundImageBuffer(buffer);

          const base64 = roundedBuffer.toString("base64");

          return {
            image: `data:application/pdf;base64,${base64}`,
            width: 100,
            height: 100,
            marginBottom: 20,
            borderStyling: "",
          };
        });

export const preparePDFContent = async (resume: any) => {
  const {
    picture,
    name,
    job_title,
    description,
    services,
    projects,
    experience,
    education,
    skills,
    languages,
    contacts,
  } = resume;

  const profilePicture = await toDataURL(picture);

  return {
    footer: displayFooter(),

    content: [
      {
        columns: [
          {
            width: "auto",
            stack: [profilePicture],
          },
          {
            width: "*",
            stack: [displayProfile({ name, job_title })],
          },
        ],
        columnGap: 15,
      },
      {
        stack: [displayDescription(description), displayProjects(projects)],
      },
      {
        columns: [
          {
            width: "65%",
            stack: [displayExperience(experience)],
          },
          {
            width: "35%",
            stack: [
              displayServices(services),
              displaySkills(skills),
              displayLanguages(languages),
              displayContacts(contacts),
            ],
          },
        ],
        columnGap: 10,
      },
      {
        stack: [, displayEducation(education)],
      },
    ],
  };
};
